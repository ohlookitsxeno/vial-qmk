import re

# Example font data (8 bytes per 8x8 character)
font_data = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0x40, 0x60,
    0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x9F, 0x78, 0xC0, 0x80, 0x00, 0xC0,
    0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE6, 0xE6,
    0xC4, 0x7F, 0xFC, 0xF8, 0xF0, 0x00, 0x00, 0x00,
    0xE0, 0xF1, 0x73, 0xFF, 0xFC, 0xED, 0x45, 0x84,
    0xE0, 0xF1, 0x73, 0xFF, 0xFC, 0xED, 0x45, 0x84,
    0x20, 0xF1, 0x73, 0xFF, 0xFC, 0xED, 0x45, 0x84,
    0x20, 0xF1, 0x73, 0xFF, 0xFC, 0xED, 0x45, 0x84,
    0xE0, 0xF1, 0x73, 0xFF, 0xFC, 0xED, 0x45, 0x84,
    0xE0, 0xF1, 0x73, 0xFF, 0xFC, 0xED, 0x45, 0x84,
    0xE0, 0x30, 0x08, 0x06, 0x83, 0xF1, 0xC0, 0x01,
    0x3E, 0xE0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x7C,
    0x86, 0x03, 0x81, 0xE1, 0xF8, 0xBC, 0x40, 0x38,
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC0, 0x71, 0x17, 0x0C, 0x71, 0x33, 0x23,
    0x27, 0x47, 0x4F, 0x4F, 0x9F, 0x9F, 0x9F, 0x9F,
    0x06, 0x17, 0x23, 0xC1, 0x80, 0x00, 0x80, 0x80,
    0x9F, 0x9F, 0xDF, 0xDE, 0x9E, 0x0E, 0x0F, 0x0E,
    0x9F, 0x9F, 0xDF, 0xDE, 0x9E, 0x0E, 0x0F, 0x0E,
    0x98, 0x9F, 0xDF, 0xDE, 0x9E, 0x0E, 0x0F, 0x0E,
    0x98, 0x9F, 0xDF, 0xDE, 0x9E, 0x0E, 0x0F, 0x0E,
    0x9F, 0x9F, 0xDF, 0xDE, 0x9E, 0x0E, 0x0F, 0x0E,
    0x9F, 0x9F, 0xDF, 0xDE, 0x9E, 0x0E, 0x0F, 0x0E,
    0x03, 0x0E, 0xD8, 0x20, 0x03, 0x07, 0x03, 0x01,
    0x00, 0x00, 0x00, 0x01, 0x03, 0x27, 0x2F, 0x7E,
    0xFF, 0xFF, 0xFC, 0xF0, 0x30, 0x81, 0x83, 0x0E,
    0x78, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x09, 0x08, 0x08, 0x10, 0x20, 0x40, 0x80,
    0x00, 0xF0, 0xF8, 0xF8, 0xF9, 0xFE, 0xFD, 0xF1,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0x00,
    0xC2, 0x02, 0x02, 0x02, 0x00, 0x00, 0x01, 0x01,
    0xC2, 0x02, 0x02, 0x02, 0x00, 0x00, 0x01, 0x01,
    0x02, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7E,
    0x02, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7E,
    0xC2, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7E,
    0xC2, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7E,
    0x00, 0x40, 0x9F, 0x78, 0xC0, 0x80, 0x00, 0x40,
    0xA0, 0xD0, 0xD0, 0x60, 0xE0, 0x60, 0xE6, 0xC6,
    0x20, 0xF1, 0x73, 0xFF, 0xFC, 0xED, 0x45, 0x84,
    0xC4, 0x7F, 0xFC, 0xF8, 0xF0, 0x08, 0x78, 0xF0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F,
    0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x30, 0x18,
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x87, 0x00, 0x00, 0x00, 0x00, 0x20, 0x30, 0x18,
    0x00, 0xC0, 0x71, 0x17, 0x08, 0x05, 0x02, 0x01,
    0x1F, 0x3F, 0x3F, 0x39, 0xF9, 0x7F, 0x9D, 0x87,
    0x98, 0x9F, 0xDF, 0xDE, 0x9E, 0x0E, 0x0F, 0x0E,
    0x06, 0x07, 0x0B, 0x4D, 0xBE, 0x9F, 0x87, 0x81,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x83, 0x47, 0x07, 0x8F, 0x8F, 0x0F, 0x4F,
    0x04, 0x00, 0x79, 0x79, 0x01, 0x05, 0x18, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x09, 0x08, 0x08, 0x00, 0x00, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x05, 0x02, 0x00, 0x03, 0x01,
    0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    0x03, 0x01, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x9F, 0x9F, 0xDF, 0xDE, 0x98, 0x08, 0x0C, 0x0E,
    0x98, 0x9F, 0xDF, 0xDE, 0x98, 0x08, 0x0C, 0x0E,
    0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF4, 0xE5, 0xE6,
    0x00, 0x00, 0x00, 0x01, 0x03, 0xA7, 0x2F, 0x7E,
    0xFF, 0xFF, 0xFC, 0xF0, 0x30, 0x81, 0x43, 0x0E,
    0xA0, 0xD0, 0xD0, 0x60, 0xE0, 0x64, 0xE5, 0xC6
]

# Example rhett_top and rhett_data
rhett_top = [
    0x00, 0x01, 0x02, 0x03,
    0x0D, 0x0E, 0x0F, 0x10,
    0x1A, 0x1B, 0x1C, 0x1D]
rhett_data = [
    [ #up
        0x27, 0x28, 0x29, 0x2a,
        0x34, 0x35, 0x36, 0x37,
        0x41, 0x42, 0x43, 0x44,
        0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01
    ],
    [ #ldown
        0x04, 0x05, 0x07, 0x2a,
        0x11, 0x12, 0x14, 0x37,
        0x1E, 0x1F, 0x21, 0x44,
        0x2B, 0x2C, 0x2E, 0x01,
        0x01, 0x01, 0x01, 0x01
    ],
    [ #rdown
        0x27, 0x28, 0x09, 0x06,
        0x34, 0x35, 0x16, 0x13,
        0x41, 0x42, 0x23, 0x20,
        0x01, 0x01, 0x01, 0x2D,
        0x01, 0x01, 0x01, 0x01
    ],
    [ #lrdown
        0x04, 0x05, 0x0B, 0x06,
        0x11, 0x12, 0x18, 0x13,
        0x1E, 0x1F, 0x25, 0x20,
        0x2B, 0x2C, 0x32, 0x2D,
        0x01, 0x01, 0x01, 0x01
    ],
    [ #ldownslap
        0x04, 0x05, 0x07, 0x2a,
        0x11, 0x12, 0x14, 0x37,
        0x1E, 0x1F, 0x21, 0x44,
        0x2B, 0x39, 0x2F, 0x01,
        0x45, 0x46, 0x3C, 0x01
    ],
    [ #rdownslap
        0x27, 0x28, 0x09, 0x06,
        0x34, 0x35, 0x16, 0x13,
        0x41, 0x42, 0x23, 0x20,
        0x01, 0x01, 0x31, 0x3A,
        0x01, 0x01, 0x01, 0x01
    ],
    [ #lrdownslap
        0x04, 0x05, 0x0B, 0x06,
        0x11, 0x12, 0x18, 0x13,
        0x1E, 0x1F, 0x25, 0x20,
        0x38, 0x39, 0x33, 0x3A,
        0x45, 0x46, 0x40, 0x01
    ], #alternatemappings
    [
        0x14, 0x48, 0x16, 0x49,
        0x05, 0x4a, 0x28, 0x4d,
        0x1b, 0x4b, 0x1c, 0x4c,
        0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01
    ]
]

# Process and deduplicate font
font_characters = [tuple(font_data[i:i+8]) for i in range(0, len(font_data), 8)]
unique_characters = []
char_mapping = {}

for i, char in enumerate(font_characters):
    if char not in unique_characters:
        unique_characters.append(char)
    char_mapping[i] = unique_characters.index(char)

# Remap rhett_top and rhett_data
def remap_data(data, mapping):
    return [mapping.get(index, None) for index in data]

remapped_rhett_top = remap_data(rhett_top, char_mapping)
remapped_rhett_data = [remap_data(row, char_mapping) for row in rhett_data]

# Export to C-compatible text file
with open("exported_font_data.c", "w") as f:
    # Write the unique font array
    f.write("const uint8_t rhettfont[] PROGMEM = {\n")
    for char in unique_characters:
        f.write("    " + ", ".join(f"0x{byte:02X}" for byte in char) + ",\n")
    f.write("};\n\n")

    # Write the remapped rhett_top array
    f.write("const uint8_t rhett_top[] PROGMEM = {\n")
    f.write("    " + ", ".join(f"0x{val:02X}" for val in remapped_rhett_top if val is not None) + "\n")
    f.write("};\n\n")

    # Write the remapped rhett_data array
    f.write("const uint8_t rhett_data[][20] PROGMEM = {\n")
    for row in remapped_rhett_data:
        f.write("    {" + ", ".join(f"0x{val:02X}" for val in row if val is not None) + "},\n")
    f.write("};\n")

print("Data successfully exported to 'exported_font_data.c'")